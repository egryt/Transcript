[00:00:00]
>> Speaker 1: Got some questions from the online chat.
>> Bianca Gandolfo: Sure.
>> Speaker 1: When a company asks, why should we hire you? How would you proceed?
>> Bianca Gandolfo: How would I ask that, how would I personally answer that? Man, guys you're not supposed to be interviewing me. I think that when you're answering this question you should be thinking about, what are your unique strengths?

[00:00:26]
And so that would take some self reflection. So let me self reflex. So, I think my unique strengths are distilling complex problems into digestible pieces. And that is important for teaching, but it's also important for designing a UI, which is just an abstraction over a system. Or even writing my code, which is also, when I write a function, that's an abstraction over a system, right?

[00:00:52]
There's an input and output. So I think I do that well, I have experience doing that. And also I'm nice, I don't know, those are some reasons.
>> Speaker 1: I'd also add one point. It's also really important if you show interest in that company, and the product, and why you're excited about that product.

[00:01:13]

>> Bianca Gandolfo: Yep.
>> Speaker 1: I feel like a lot of people are asking you for that.
>> Bianca Gandolfo: I see, yeah. Why we should hire you, not necessarily asking you about your strengths, but asking about, how your strengths play uniquely to that role?
>> Speaker 1: Yeah.
>> Bianca Gandolfo: Yeah, you can try to remember with a job.

[00:01:31]
If you're on the phone, you can always have your job posting up, your resume up, and any other notes that you want. So that you can quickly reference, and I always do that just so that I don't get flabbergasted. That was a good question.
>> Speaker 1: What do you think about the online resume like stack over developers for you to [INAUDIBLE]?

[00:01:55]

>> Bianca Gandolfo: So I call that your web presents. What do I think about it? I think it's super important. They're gonna Google you at every step of the way right before they meet with the interview, they're gonna look at your LinkedIn. They might check out your GitHub. They'll probably have your resume.

[00:02:14]
So yeah, it's super important. You wanna make sure that they're consistent, right? So if in your resumes it says something different than your LinkedIn. It could just be like the way that you're formatting it, or something like that. It can confuse people, and you wanna think about, what is you narrative?

[00:02:31]
What is your story? Where did you start? How did you get to where you are now? And kinda make sure that, that lines up correctly, cuz people trust you and they feel like you're consistent. And so, I would just be mindful of that in your web presence. Especially old, old logs that you might have that might be not really consistent with your story anymore.

[00:02:53]
It might be very basic programming stuff, and maybe you want to down play that, and maybe you wanna hide that post or something like that. So, super important, and that goes with sort of the resume application piece of the process.
>> Bianca Gandolfo: Sure.
>> Speaker 1: What do you think about books like Cracking the Code Interview?

[00:03:22]
Is that still considered the best technical resource, or prepping [CROSSTALK] question?
>> Bianca Gandolfo: Yeah, yeah, I mean, other than Frontend Masters, I think that Cracking the Coding Interview is a really good resource. [LAUGH] Yeah, I use Cracking the Coding Interview when I prepare for these kind of workshops. Also, when I do my own interview preparation.

[00:03:47]
I have a whole list of resources that I'll send you guys after, but Cracking the Coding Interview is one that I recommend. It's just this huge book, and it has all the basic computer science fundamentals that you have learned about, but maybe never fully learned. Even if you went to college, and took that class, and somehow passed, you might not fully understand them.

[00:04:09]
So it really this tells it well, it's a lot of practice problems with solutions that are explained and intuitive hands on stuff. So, that's nice, it's a nice resource, some other resources. So the thing that I wouldn't recommend and I used to recommend. Because I first learned data structure algorithm through taking computer science classes.

[00:04:36]
Like on books some things like that. I would recommend my favorite algorithm textbook. But I realize that's not realistic and necessary for people who are just trying to pass their technical interview. It's a little too academic, it's a little too, it takes it too far. When really you just need a basic understanding of the concept so then you can apply it to the different problems.

[00:05:02]
You don't need to know the name of particular algorithms, or things like that.
>> Speaker 1: If you're in an on sight interview, and you're given the question that you don't know, how do you handle that?
>> Bianca Gandolfo: Well, you probably will never know it. So in terms of technical interviews, well, there are themes, and I'll talk a little bit about the themes throughout this class.

[00:05:29]
That you'll see with particular questions, but they always have some twist so it's not about knowing something ahead of time and memorizing. It's really about learning the concept, learning how to solve a problem and break it down, then knowing the answer. But if it's not a question that I can solve, or I get stuck I think it's just important to be honest.

[00:05:52]
So a lot of us when we're in a interview setting we feel like we have to pretend especially if you're suffering from imposter syndrome where you feel like everyone else knows all the stuff and you don't know anything. And you're just fake and they're gonna find out any moment, especially in this on sight interview.

[00:06:09]
You might feel like you need to pretend like you know things you don't know. Don't do that, this whole fake it till you make it, you can only take that so far, right? When you get to a technical question, you can't pretend to know the answer and you shouldn't just make it up.

[00:06:25]
You can make inferences, so you can say, if someone says, what is a quad tree? And you could be like, well I'm not really sure, I've never done too much work with quad trees, but I've done work with binary trees. And binary trees just a tree which has two child notes, so maybe, I could guess, just say it, just be honest, that a quad tree is a tree where a node at most can have four nodes.

[00:06:54]
You could just but just be open with it and communicate it, like that, versus like quad tree, definitely four children. And in your head you're, like, God, I hope they don't ask a follow up question. [LAUGH] Sure.
>> Speaker 3: So one thing, I started with that a little bit is that sometimes I'll have heard of the concept, and they''ll be one sentence on it in lecture or something like that.

[00:07:20]
And so I'll phrase it to be, like, yeah, I know what it is, but then I'll just, kind of realize like no, I don't fully grasp this. So how do I spin that and make sure that I'm coming off as authentic like yeah I know what the concept is, I just haven't worked with it coming off as inauthentic because I did start it off as, I know what that is.

[00:07:40]

>> Bianca Gandolfo: Yeah, yeah, yeah, yeah, so do you have a specific example?
>> Speaker 3: In one of the interviews that I had for a book camp, and I know what it is now, don't worry, [LAUGH] But they were trying to communicate stack to me. And it was kind of like a recursion question, and they're like okay, so why is it that when we put the number after the call to the function it's printing it out backwards.

[00:08:16]
Or whatever the numbers were going downwards from five and then afterwards It was going upwards from five. And I thought I knew what it was like I was like yeah, that makes sense and I tried to talk through it. But then I realized that I knew what the word was, and I remembered talking about it in a lecture, but I couldn't on the spot.

[00:08:38]
I needed ten minutes to just gather my thoughts, but obviously, you don't have that when you're in front of the person.
>> Bianca Gandolfo: Yeah, yeah, no, that's a good example. So, I think how I would handle that is that,
>> Bianca Gandolfo: Talk through your thought process, cuz that's what they're really looking for.

[00:09:01]
Talk through your thought process when you hit a speed bump in that process, you can just day maybe that isn't exactly what I thought it was. And then, if you identify where your understanding is different from like whatever reality is happening in your code. You'd be like I expected to do this, but it's actually doing that, and then you could be like I wonder what would cause that?

[00:09:29]
And then, try to think about it, but posing that like could help the interviewer give you a hint. So going through it, thinking about saying what you would expect. Finding out that maybe it didn't meet your expectations. This is just like classic debugging, right? I expected when I clicked on this button for the window to a model, to pop up but it didn't.

[00:09:55]
And then you could think okay, what are the reasons why that didn't happen? Okay, so, we have the click handler, I'm toggling a class maybe, a display you know like a hide show kind of class. Is there an error in the terminal, maybe it's just my app's broken, and none of my click handlers are working.

[00:10:16]
So thinking through what could be causing that gap, that's how I would handle it, I think. Yeah, I think it is good to have these experiences because it makes you realize like where are the bounds of your knowledge. So obviously, in an interview was asked about different application state models.

[00:10:47]
And I was like, yeah, reacting to directional and then he kept asking me question, maybe I don't actually understand how this works. And that was really important for me, because I was like, no, I really need to study up on this and really really understand this. Because it's important to me that I master my craft.

[00:11:06]
So,
>> Bianca Gandolfo: Cool, any more questions? These are great questions.
>> Speaker 1: I just have a tiny comment when I was interviewing, in the early stages, I always failed the technical interviews. Because I didn't understand the basics of closure and scope, and the stuff that you teach and fundamentals to functional, and also Kyle Simpson Deep JavaScript Foundations.

[00:11:29]
Like back when front masters was a side project. One subject those courses at fully pass the technical-
>> Bianca Gandolfo: So now you can get any job.
>> Speaker 1: What's that?
>> Bianca Gandolfo: So now you can get any job.
>> Speaker 1: Now, I can get any job [LAUGH].
>> Bianca Gandolfo: [LAUGH].
>> Speaker 1: Well obviously, Frontend Masters worked out so,

[00:11:48]

>> Bianca Gandolfo: [LAUGH].
>> Speaker 1: But those two course are for me, really helped as far as understanding cuz people will always ask you what's closure because you're talking about that kind of thing.
>> Bianca Gandolfo: Yeah, yeah, yeah. Those kind of questions like closure, prototype inheritance or language specific questions, that is a type of question you might be asked.

[00:12:10]
That is not a data structure or algorithm one that you can reference on different Master's courses. What Mark mentioned, my JavaScript fundamentals course. Also, Kyle Simpsons Deep Foundation course will cover that. Some other kinds of questions that you might need to prepare for that aren't data structures. And algorithm specific are there's some logic and math ones out there that I don't teach because I'm not very good at those.

[00:12:35]
And I think they're bad interview questions, but sometimes they'll still ask them anyway. Usually have bigger companies those logic in math questions. There are language specifics then there is domain more front end back end, or full stock kind of questions about sort of, how a web application in general, how they work?

[00:12:59]
How does the Internet work, and then recursion is more of a computer science-y question,
>> Bianca Gandolfo: But it falls under data structures and algorithms because we use them a lot in algorithms,and it's a technique for algorithms. Cool. When we talk about that, if you're interested in recursion and recursive algorithms.

[00:13:23]
We talk about that for, I don't know, how many hours last workshop. Maybe two or three? And we just like recursed all day. We won't be doing too much for recursion today, so

